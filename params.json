{"name":"Validatar","tagline":"Functional testing framework for Big Data pipelines","body":"# Validatar\r\n\r\n[![Build Status](https://travis-ci.org/yahoo/validatar.svg?branch=master)](https://travis-ci.org/yahoo/validatar) [![Coverage Status](https://coveralls.io/repos/yahoo/validatar/badge.svg?branch=master)](https://coveralls.io/r/yahoo/validatar?branch=master) [![Download](https://api.bintray.com/packages/yahoo/maven/validatar/images/download.svg)](https://bintray.com/yahoo/maven/validatar/_latestVersion)\r\n\r\nFunctional testing framework for Big Data pipelines. Current support is only for Hive, but we are planning support for Pig as well as others.\r\n\r\n## How to build Validatar\r\n\r\nYou need maven/JDK to build Validatar.\r\n\r\nRun:\r\n\r\n    make jar\r\n\r\n## How to run\r\n\r\nTo run Validatar:\r\n\r\n    export HADOOP_CLASSPATH=\"$HADOOP_CLASSPATH:/path/to/hive/jdbc/lib/jars/*\"\r\n    hadoop jar validatar-jar-with-dependencies.jar com.yahoo.validatar.App -s tests/ --report report.xml\r\n\r\nYou will also need the settings specified for the engine you are planning to run.\r\n\r\n## Writing Tests\r\n\r\n### Test file format\r\n\r\nTest files are written in the YAML format. The schema is as follows:\r\n\r\n```\r\nname: Test family name : String\r\ndescription: Test family description : String\r\nqueries:\r\n   - name: Query name : String : Ex \"Analytics\"\r\n     engine: Execution engine : String (\"Hive\")\r\n     value: Query : String : Ex \"SELECT COUNT(*) AS pv_count FROM page_data\"\r\n   ...\r\ntests:\r\n   - name: Test name : String\r\n     description: Test description : String\r\n     asserts:\r\n        - Assertion on some query. Query name is prefixed to the value. : Ex: Analytics.pv_count > 10000\r\n   ...\r\n```\r\n\r\nQueries are named, this name is used as a namespace for all the values returned from the query. In the above example, we created a query named \"Analytics\". It stores the return value \"pv_count\". We are then able to use this in our later asserts.\r\n\r\n### Assertions\r\n\r\nAssertions are quite flexibile, allowing for the following operations:\r\n\r\n```\r\n                   >  : greater than\r\n                   >= : greater or equal to\r\n                   <  : less than\r\n                   <= : less or equal to\r\n                   == : equal to\r\n                   != : not equal to\r\n                   +  : add\r\n                   -  : subtract\r\n                   *  : multiply\r\n                   /  : divide\r\n                   && : boolean and\r\n                   || : boolean or\r\napprox(a, b, percent) : true if a and b within percent difference (0.0 to 1.0) of each other.\r\n```\r\n\r\n### Parameter Substitution\r\n\r\nYou may want queries that use a specific date column, or similar changing parameter. For this, we have a parameter substation feature.\r\n\r\nSimply pass `--parameter KEY=VALUE` in the CLI and the `KEY` will be replaced with `VALUE` in all queries. For example, to query June 23rd 2015, you could use `--parameter DATE=2015-06-23`. If the query uses `${DATE}` in the query it will be replaced before execution with `2015-06-23`.\r\n\r\n## Members\r\nAkshai Sarma, akshaisarma@gmail.com  \r\nJosh Walters, josh@joshwalters.com\r\n\r\n## Contributors","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}